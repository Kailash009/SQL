There are several techniques for optimizing SQL queries, some of which are:
Use indexes: Indexes can greatly improve the performance of queries by allowing the database engine to quickly find the relevant data. Make sure that the tables being queried have appropriate indexes on the columns used in the WHERE, JOIN and ORDER BY clauses.
Minimize the use of subqueries: Subqueries can be slow because they require the database engine to execute a separate query for each row returned by the outer query. Whenever possible, try to use JOINs instead of subqueries.
Avoid using SELECT *: Instead of selecting all columns, only select the columns that are needed. This can reduce the amount of data that needs to be retrieved from disk and improve query performance.
Use EXISTS instead of COUNT: If you only need to know if a row exists, use EXISTS instead of COUNT. EXISTS stops as soon as it finds a match, whereas COUNT has to scan the entire table.
Use UNION ALL instead of UNION: UNION removes duplicate rows from the result set, which can be time-consuming. If you know that the result sets being combined do not contain duplicates, use UNION ALL instead.
Avoid using LIKE with leading wildcards: Using LIKE with a leading wildcard (e.g. '%searchterm') can cause the query to do a full table scan, which is slow. Instead, try to use a more specific condition that can use an index.
Use stored procedures: Stored procedures can improve performance by reducing the amount of data transferred between the database and the application. They can also be precompiled, reducing the time it takes to execute them.
These are just a few techniques for optimizing SQL queries. Other techniques include using appropriate data types, avoiding cursors, and using temporary tables. It's important to analyze the query execution plan to identify performance bottlenecks and then use the appropriate optimization technique to address them.