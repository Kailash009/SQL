PL/SQL :- 
-----------------------
>> It stands for Procedural Language/Structured Query Language.
>> It is the concept in which we create variables,conditional statements and looping concepts.
------------------------------------------------------------------------------------------------------------------------------------------
1. How to create variable:-
>> To create a variable in PL/SQL we use 'declare' keyword.
>> Variable name must be associated with @ symbol.
Declaration of Variable:-
----------------------------------------
Syntax:-
--------------------
declare @variablename datatype.
---------------------------------------------------
2. How to assign value in Variable:-
--------------------------------------------------
>> we use 'set' Keyword to assign a value into a variable.
Syntax:-
---------------------
set @variablename=Value
----------------------------------------------
3. How to Display variable value.
---------------------------------------------------------
>> print() is used to display the ouput/variable value.
--------------------------------------------------------------------------
Type casting in sql :-
>> For typecasting we use cast() method.
---------------------------------------------------------------------------
declare @a int
set @a=100
print('a='+cast(@a as varchar))
--------------------------------------------------------------------------
Operators:-
------------------------------
1. Arithmetic Operator :-
+
-
*
/
---------------------------------------
For ex -> wap to find sum,sub,mult,div.
--wap to find sum,sub,mult,div.
declare @a int,@b int
declare @sm int,@sb int,@mt int,@div int
set @a=100
set @b=200
set @sm=@a+@b
set @sb=@a-@b
set @mt=@a*@b
set @div=@b/@a
print('a='+cast(@a as varchar))
print('b='+cast(@b as varchar))
print('Sum='+cast(@sm as varchar))
print('Sub='+cast(@sb as varchar))
print('Mult='+cast(@mt as varchar))
print('DIV='+cast(@div as varchar))
------------------------------------------------------------
2. Relational
@a=10,@b=20
>   @a > @b  ->False
>=  @a > = @b -> False
<     @a < @b  -> True
<=    @a < = @b  -> True
==    @a == @b  -> False
!=     @a! = @b  -> True
---------------------------------------------------------------
3. Logical -> and , or , not.
---------------------------------------------------------------
4.  Assignment Operator.
=
+=
-=
*=
/=
a=5
a+=3  or a=a+3
a-=3   or a=a-3
a*=3   or a=a*3
a/=3   or a=a/3
------------------------------------------------------------
declare @a int,@sb int,@mt int,@div int
set @a=5
set @sb=5
set @mt=5
set @div=10
set @a+=3 --- or @a=@a+3
set @sb-=3 -- sb=sb-3 5-3=2
set @mt*=3 -- or mt=mt*3 -- 5*3
set @div/=3 -- div=div/3 -- 10/3 -> 3
print('Sum='+cast(@a as varchar)) -- 8
print('Sub='+cast(@sb as varchar)) -- 2
print('Mult='+cast(@mt as varchar)) -- 15
print('Div='+cast(@div as varchar)) -- 3
----------------------------------------------------------------------
Assignment Task :-
----------------------------------
1. wap to find the swap in two no using third variable.
Input :   a=5 ,b=10
Output : a=10,b=5
2. wap to find the swap in two no without using third variable.
Collection Classes in C#:- 
-------------------------------------------------------------------------------------------
1. Non-Generic.
	>> In it you can store different elements together.
	using System.Collections;
	a) ArrayList.
	using System;
using System.Text;
using System.Collections;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            ArrayList al = new ArrayList();
            al.Add("Java");
            al.Add(123);
            al.Add(true);
            al.Add(345.678);
            al.Add(DateTime.Now);
            foreach(object res in al)
            {
                Console.WriteLine(res);
            }
        }
    }
}
-------------------------------------------------------------------------------
	b) HashTable.
>> it store value in key-value pair.
using System;
using System.Text;
using System.Collections;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            Hashtable ht = new Hashtable();
            ht.Add("hello", 123);
            ht.Add(12, "Java");
            ht.Add(true, "IsActive");
            ht.Add("datetime", DateTime.Now);
            foreach(DictionaryEntry res in ht)
            {
                Console.WriteLine(res.Key+"="+res.Value);
            }
        }
    }
}
	c) Sorted List.
>> It also store value in key value pair.
>> Ascending order.
using System;
using System.Text;
using System.Collections;
using System.Net.Http.Headers;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            SortedList sl = new SortedList();
            sl.Add(12,"df");
            sl.Add(56, "djksf");
            sl.Add(55, 454);
            sl.Add(1, "LJkl");
            foreach (DictionaryEntry item in sl)
            {
                Console.WriteLine(item.Key + "=" +item.Value);
            }
        }
    }
}
--------------------------------------------------------------------------------------------------
	d) Stack.
>> It implements the LIFO (Last In First Out).
PUSH -> To insert an element into stack.
POP -> To delete an element from the stack.
using System;
using System.Text;
using System.Collections;
using System.Net.Http.Headers;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            Stack st = new Stack();
            st.Push(34);
            st.Push("Hello");
            st.Push(345.332);
            st.Push(true);
            st.Push("Jva");
            st.Pop();
            st.Pop();
            foreach (object item in st)
            {
                Console.WriteLine(item);
            }
        }
    }
}

-------------------------------------------------------------------------------------------------
	e) Queue.
>> FIFO -> First in First Out.
>> Enqueue -> Insert
>> Dequeue -> Delete
using System;
using System.Text;
using System.Collections;
using System.Net.Http.Headers;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            Queue qu = new Queue();
            qu.Enqueue(34);
            qu.Enqueue("Hello");
            qu.Enqueue(345.332);
            qu.Enqueue(true);
            qu.Enqueue("Jva");
            qu.Dequeue();
            qu.Dequeue();
            foreach (object item in qu)
            {
                Console.WriteLine(item);
            }
        }
    }
}
---------------------------------------------------

2. Generic.
	>> In it you can store only similar type of elements together.
	using System.Collections.Generic
	a) List
using System;
using System.Text;
using System.Collections.Generic;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            List<int> lt = new List<int>();
            lt.Add(983);
            lt.Add(123);
            lt.Add(567);
            lt.Add(987);
            lt.Add(465);
            foreach (int item in lt)
            {
                Console.WriteLine(item);
            }
        }
    }
}
-------------------------------------------------------------------------------------------------------------
	b) Dictionary.
using System;
using System.Text;
using System.Collections.Generic;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            Dictionary<string, int> dt = new Dictionary<string, int>();
            dt.Add("hello", 345);
            dt.Add("abc", 32);
           foreach (KeyValuePair<string,int> item in dt)
            {
                Console.WriteLine(item.Key+"="+item.Value);
            }
        }
    }
}
-------------------------------------------------------------------------------------------------------
	c) Sorted List.
using System;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;

namespace Batch12PMWE
{
    class Demo
    {
        static void Main()
        {
            SortedList<int, string> sl = new SortedList<int, string>();
            sl.Add(12, "Java");
            sl.Add(34, "PHP");
            sl.Add(1, "hari");
            foreach (KeyValuePair<int,string> item in sl)
            {
                Console.WriteLine(item.Key+"="+item.Value);
            }
        }
    }
}
	d) Stack.
	e) Queue.
----------------------------------------------------------------------------------------------------------------
Generic Class:-
-----------------------------
>> It allows you to delay the specification of data type of any type of value.
>> It helps to improve perfomance,type safe and code  reuse.
----------------------------------------------------------------------------------------------------------------
using System;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;

namespace Batch12PMWE
{
    class Example<T>  // User Defined Generic Class.
    {
        T b;
        public Example(T a)
        {
            b = a;
        }
        public void show()
        {
            Console.WriteLine(b);
        }
    }
    class Demo
    {
        static void Main()
        {
            Example<int> ex = new Example<int>(200);   // INT
            ex.show();

            Example<bool> ex1 = new Example<bool>(true);  // BOOL
            ex1.show();

            Example<double> ex2 = new Example<double>(6774.88); // DOUBLE
            ex2.show();

            Example<string> ex3 = new Example<string>("DOT NET CORE"); // String
            ex3.show();

            Example<char> ex4 = new Example<char>('P'); // CHAR
            ex4.show();
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------
using System;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;

namespace Batch12PMWE
{
    class Example<T1,T2>  // User Defined Generic Class.
    {
        T1 name;
        T2 age;
        public Example(T1 name,T2 age)
        {
            this.name = name;
            this.age = age;
        }
        public void show()
        {
            Console.WriteLine("Name="+this.name);
            Console.WriteLine("Age="+this.age);
        }
    }
    class Demo
    {
        static void Main()
        {
            Example<string, int> ex = new Example<string, int>("Hari",23);
            ex.show();

            Example<bool, int> ex1 = new Example<bool, int>(true, 1234);
            ex1.show();
        }
    }
}
-------------------------------------------
Generic Method:- Pending
Delegation
Anonymous Type.
Tuple.
Enum.
Partial Class/Method.
String Interpolation.
Lambda Expression.
Extension Method.
Exception Handling.
Reflection.
Multithreading.
-------------------------------------------
html,css,js,sqlserver
































